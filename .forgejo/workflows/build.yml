name: Build and Push Docker Image

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: thelastguardian/tplinkexporter-plus

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login ${{ env.REGISTRY }} -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Generate Docker tags
      id: meta
      run: |
        IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        TAGS=""
        
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
          TAGS="$IMAGE:$VERSION,$IMAGE:latest"
        elif [[ $GITHUB_REF == refs/heads/main ]] || [[ $GITHUB_REF == refs/heads/master ]]; then
          TAGS="$IMAGE:latest"
        else
          BRANCH=${GITHUB_REF#refs/heads/}
          TAGS="$IMAGE:$BRANCH"
        fi
        
        echo "tags=$TAGS" >> $GITHUB_OUTPUT
        echo "Generated tags: $TAGS"

    - name: Build Docker image
      run: |
        IFS=',' read -ra TAG_ARRAY <<< "${{ steps.meta.outputs.tags }}"
        
        # Build the image
        docker build -t "${TAG_ARRAY[0]}" .
        
        # Tag additional versions if needed
        for tag in "${TAG_ARRAY[@]:1}"; do
          docker tag "${TAG_ARRAY[0]}" "$tag"
        done

    - name: Push Docker image
      if: github.event_name != 'pull_request'
      run: |
        IFS=',' read -ra TAG_ARRAY <<< "${{ steps.meta.outputs.tags }}"
        
        for tag in "${TAG_ARRAY[@]}"; do
          echo "Pushing $tag"
          docker push "$tag"
        done

  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.19'

    - name: Download dependencies
      run: go mod download

    - name: Run go vet
      run: go vet ./...

    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi

    - name: Build test
      run: go build -o tplinkexporter-plus .